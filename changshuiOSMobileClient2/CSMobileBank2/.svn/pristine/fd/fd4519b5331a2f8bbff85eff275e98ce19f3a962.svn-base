
#import "CalendarView.h"

@interface CalendarView()

// Gregorian calendar
@property (nonatomic, strong) NSCalendar *gregorian;

// Selected day

// Width in point of a day button
@property (nonatomic, assign) NSInteger dayWidth;

// NSCalendarUnit for day, month, year and era.
@property (nonatomic, assign) NSCalendarUnit dayInfoUnits;

// Array of label of weekdays
@property (nonatomic, strong) NSArray * weekDayNames;

// View shake
@property (nonatomic, assign) NSInteger shakes;
@property (nonatomic, assign) NSInteger shakeDirection;

// Gesture recognizers
@property (nonatomic, strong) UISwipeGestureRecognizer * swipeleft;
@property (nonatomic, strong) UISwipeGestureRecognizer * swipeRight;



@end
@implementation CalendarView

#pragma mark - Init methods

- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self)
    {
        _dayWidth                   = frame.size.width/7;
        _originX                    = (frame.size.width - 7*_dayWidth)/2;
        _gregorian                  = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
        _borderWidth                = 4;
        _originY                    = _dayWidth;
        _calendarDate               = [NSDate date];
        _dayInfoUnits               = NSEraCalendarUnit | NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit;
        
        _monthAndDayTextColor       = [UIColor brownColor];
        _dayBgColorWithoutData      = [UIColor whiteColor];
        _dayBgColorWithData         = [UIColor whiteColor];
        _dayBgColorSelected         = [UIColor brownColor];
        
        _dayTxtColorWithoutData     = [UIColor brownColor];
        _dayTxtColorWithData        = [UIColor brownColor];
        _dayTxtColorSelected        = [UIColor whiteColor];
        
        _borderColor                = [UIColor brownColor];
        _allowsChangeMonthByDayTap  = NO;
        _allowsChangeMonthByButtons = NO;
        _allowsChangeMonthBySwipe   = YES;
        _hideMonthLabel             = NO;
        _keepSelDayWhenMonthChange  = NO;
        
        _nextMonthAnimation         = UIViewAnimationOptionTransitionCrossDissolve;
        _prevMonthAnimation         = UIViewAnimationOptionTransitionCrossDissolve;
        
        _defaultFont                = [UIFont systemFontOfSize:15.0f];//[UIFont fontWithName:@"HelveticaNeue" size:15.0f];
        _titleFont                  = [UIFont systemFontOfSize:15.0f];//[UIFont fontWithName:@"Helvetica-Bold" size:15.0f];
        _dateFont                = [UIFont boldSystemFontOfSize:12.0f];//[UIFont fontWithName:@"HelveticaNeue" size:12.0f];
        _holidayFont                = [UIFont boldSystemFontOfSize:10.0f];//[UIFont fontWithName:@"HelveticaNeue" size:10.0f];

        
        _swipeleft = [[UISwipeGestureRecognizer alloc]initWithTarget:self action:@selector(showNextMonth)];
        _swipeleft.direction=UISwipeGestureRecognizerDirectionLeft;
        [self addGestureRecognizer:_swipeleft];
        _swipeRight = [[UISwipeGestureRecognizer alloc]initWithTarget:self action:@selector(showPreviousMonth)];
        _swipeRight.direction=UISwipeGestureRecognizerDirectionRight;
        [self addGestureRecognizer:_swipeRight];
        
        NSDateComponents *components = [_gregorian components:_dayInfoUnits fromDate:[NSDate date]];
        components.hour         = 0;
        components.minute       = 0;
        components.second       = 0;
        
        _selectedDate = [_gregorian dateFromComponents:components];
        
        NSArray * shortWeekdaySymbols = [[[NSDateFormatter alloc] init] shortWeekdaySymbols];
        _weekDayNames  = @[shortWeekdaySymbols[1], shortWeekdaySymbols[2], shortWeekdaySymbols[3], shortWeekdaySymbols[4],
                           shortWeekdaySymbols[5], shortWeekdaySymbols[6], shortWeekdaySymbols[0]];
        
        self.backgroundColor = [UIColor clearColor];
        self.frame = frame;
    }
    return self;
}

-(id)init
{
    self = [self initWithFrame:CGRectMake(0, 0, 320, 400)];
    if (self)
    {
        
    }
    return self;
}

#pragma mark - Custom setters

-(void)setAllowsChangeMonthByButtons:(BOOL)allows
{
    _allowsChangeMonthByButtons = allows;
    [self setNeedsDisplay];
}

-(void)setAllowsChangeMonthBySwipe:(BOOL)allows
{
    _allowsChangeMonthBySwipe   = allows;
    _swipeleft.enabled          = allows;
    _swipeRight.enabled         = allows;
}

-(void)setHideMonthLabel:(BOOL)hideMonthLabel
{
    _hideMonthLabel = hideMonthLabel;
    [self setNeedsDisplay];
}

-(void)setSelectedDate:(NSDate *)selectedDate
{
    _selectedDate = selectedDate;
    [self setNeedsDisplay];
}

-(void)setCalendarDate:(NSDate *)calendarDate
{
    _calendarDate = calendarDate;
    [self setNeedsDisplay];
}


#pragma mark - Public methods

-(void)showNextMonth
{
    NSDateComponents *components = [_gregorian components:_dayInfoUnits fromDate:_calendarDate];
    components.day = 1;
    components.month ++;
    NSDate * nextMonthDate =[_gregorian dateFromComponents:components];
    
    if ([self canSwipeToDate:nextMonthDate])
    {
        [self.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];
        _calendarDate = nextMonthDate;
        components = [_gregorian components:_dayInfoUnits fromDate:_calendarDate];
        
        if (!_keepSelDayWhenMonthChange)
        {
            _selectedDate = [_gregorian dateFromComponents:components];
        }
        [self performViewAnimation:_nextMonthAnimation];
    }
    else
    {
        [self performViewNoSwipeAnimation];
    }
}


-(void)showPreviousMonth
{
    NSDateComponents *components = [_gregorian components:_dayInfoUnits fromDate:_calendarDate];
    components.day = 1;
    components.month --;
    NSDate * prevMonthDate = [_gregorian dateFromComponents:components];
    
    if ([self canSwipeToDate:prevMonthDate])
    {
        [self.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];
        _calendarDate = prevMonthDate;
        components = [_gregorian components:_dayInfoUnits fromDate:_calendarDate];
        
        if (!_keepSelDayWhenMonthChange)
        {
            _selectedDate = [_gregorian dateFromComponents:components];
        }
        [self performViewAnimation:_prevMonthAnimation];
    }
    else
    {
        [self performViewNoSwipeAnimation];
    }
}

#pragma mark - Various methods


-(NSInteger)buttonTagForDate:(NSDate *)date
{
    NSDateComponents * componentsDate       = [_gregorian components:_dayInfoUnits fromDate:date];
    NSDateComponents * componentsDateCal    = [_gregorian components:_dayInfoUnits fromDate:_calendarDate];
    
    if (componentsDate.month == componentsDateCal.month && componentsDate.year == componentsDateCal.year)
    {
        // Both dates are within the same month : buttonTag = day
        return componentsDate.day;
    }
    else
    {
        //  buttonTag = deltaMonth * 40 + day
        NSInteger offsetMonth =  (componentsDate.year - componentsDateCal.year)*12 + (componentsDate.month - componentsDateCal.month);
        return componentsDate.day + offsetMonth*40;
    }
}

-(BOOL)canSwipeToDate:(NSDate *)date
{
    if (_datasource == nil)
        return YES;
    return [_datasource canSwipeToDate:date];
}

-(void)performViewAnimation:(UIViewAnimationOptions)animation
{
    NSDateComponents * components = [_gregorian components:_dayInfoUnits fromDate:_selectedDate];
    
    NSDate *clickedDate = [_gregorian dateFromComponents:components];
    [_delegate dayChangedToDate:clickedDate];
    
    [UIView transitionWithView:self
                      duration:0.5f
                       options:animation
                    animations:^ { [self setNeedsDisplay]; }
                    completion:nil];
}

-(void)performViewNoSwipeAnimation
{
    _shakeDirection = 1;
    _shakes = 0;
    [self shakeView:self];
}

// Taken from http://github.com/kosyloa/PinPad
-(void)shakeView:(UIView *)theOneYouWannaShake
{
    [UIView animateWithDuration:0.05 animations:^
     {
         theOneYouWannaShake.transform = CGAffineTransformMakeTranslation(5*_shakeDirection, 0);
         
     } completion:^(BOOL finished)
     {
         if(_shakes >= 4)
         {
             theOneYouWannaShake.transform = CGAffineTransformIdentity;
             return;
         }
         _shakes++;
         _shakeDirection = _shakeDirection * -1;
         [self shakeView:theOneYouWannaShake];
     }];
}

#pragma mark - Button creation and configuration

-(UIButton *)dayButtonWithFrame:(CGRect)frame
{
    UIButton *button                = [UIButton buttonWithType:UIButtonTypeCustom];
    button.titleLabel.font          = _defaultFont;
    button.frame                    = frame;
    button.layer.borderColor        = _borderColor.CGColor;
    [button     addTarget:self action:@selector(tappedDate:) forControlEvents:UIControlEventTouchUpInside];
    return button;
}

-(void)configureDayButton:(UIButton *)button withDate:(NSDate*)date
{
    NSDateComponents *components = [_gregorian components:_dayInfoUnits fromDate:date];
    NSString*titleStr;
    NSString*holiday;
    NSString*holidayGL;
    if (self.isSignCalen) {
        button.enabled = NO;
    }else
        button.enabled = YES;
    if (!self.isSignCalen) {

    titleStr = [self LunarForSolarYear:(int)components.year Month:(int)components.month Day:(int)components.day];//农历
    
    holiday = [self LunarForSolarYear:titleStr];    //农历节日
    
    }
    holidayGL = [self changStyle:date];                              //公历节日

    NSArray *solarYear_arr= [titleStr componentsSeparatedByString:@"-"];
    if ([solarYear_arr[1]isEqualToString:@"初一"]) {
        titleStr = [NSString stringWithFormat:@"%@月",solarYear_arr[0]];
    }else{
        titleStr = solarYear_arr[1];
    }
    
    NSString*textStr = titleStr;
    
    if (![holidayGL isEqualToString:@""]) {
        textStr = holidayGL;
    }
    if (![holiday isEqualToString:@""]) {
        textStr = holiday;
    }
    if (![holidayGL isEqualToString:@""]&&![holiday isEqualToString:@""]) {
        textStr = [NSString stringWithFormat:@"%@ %@",holidayGL,holiday];
    }
    
    UILabel*dateLab = [[UILabel alloc]initWithFrame:CGRectMake(5, 2, 20, 15)];
    dateLab.font = _dateFont;
    dateLab.backgroundColor = [UIColor clearColor];
    dateLab.text = [NSString stringWithFormat:@"%ld",(long)components.day];
    dateLab.textColor = _dayTxtColorWithData;
    
    [button addSubview:dateLab];

    UILabel*holidayLab = [[UILabel alloc]initWithFrame:CGRectMake(5, 12, button.frame.size.width-5, 20)];
    if (self.isSignCalen) {
        holidayLab.font = [UIFont systemFontOfSize:8];
    }else
    holidayLab.font = _holidayFont;
    holidayLab.backgroundColor = [UIColor clearColor];
    holidayLab.text = textStr;
    holidayLab.textColor = [UIColor grayColor];
    [button addSubview:holidayLab];
    
    button.tag = [self buttonTagForDate:date];
    
    NSDateComponents *componentsToday = [_gregorian components:_dayInfoUnits fromDate:[NSDate date]];
    componentsToday.hour         = 0;
    componentsToday.minute       = 0;
    componentsToday.second       = 0;
    
    if([_selectedDate compare:date] == NSOrderedSame)
    {
        // Selected button
        button.layer.borderWidth = 2;
        [button setTitleColor:_dayTxtColorSelected forState:UIControlStateNormal];
        if (date == [_gregorian dateFromComponents:componentsToday]) {
//            当天日期的颜色
//            [button setBackgroundColor:[UIColor colorWithRed:1.00f green:0.85f blue:0.66f alpha:1.00f]];
//            if (self.isSignCalen) {
//                [button setBackgroundColor:[UIColor colorWithRed:0.83f green:0.94f blue:1.00f alpha:1.00f]];
//            }else
            [button setBackgroundColor:[UIColor colorWithRed:0.01f green:0.69f blue:0.87f alpha:1.00f]];
        }else{
            if (self.isSignCalen) {
                [button setBackgroundColor:[UIColor colorWithRed:0.83f green:0.94f blue:1.00f alpha:1.00f]];
            }else
            [button setBackgroundColor:[UIColor colorWithRed:1.00f green:0.85f blue:0.66f alpha:1.00f]];
        }
        
//        NSDate *dd = [[NSDate date] copy];
//        UIButton *pp =(UIButton *) [self viewWithTag:[self buttonTagForDate:dd]];
//        pp.backgroundColor = [UIColor redColor];

        
    }
    else
    {
        // Unselected button
        button.layer.borderWidth = _borderWidth/2.f;
        [button setTitleColor:_dayTxtColorWithoutData forState:UIControlStateNormal];
        [button setBackgroundColor:_dayBgColorWithoutData];
        
        if (_datasource != nil && [_datasource isDataForDate:date])
        {
            [button setTitleColor:_dayTxtColorWithData forState:UIControlStateNormal];
            if (date == [_gregorian dateFromComponents:componentsToday]) {
//                if (self.isSignCalen) {
//                    [button setBackgroundColor:[UIColor colorWithRed:1.00f green:0.85f blue:0.66f alpha:1.00f]];
//                }else
                [button setBackgroundColor:[UIColor colorWithRed:0.01f green:0.69f blue:0.87f alpha:1.00f]];//当天日期的颜色
//                [button setBackgroundColor:_dayBgColorWithData];//当天日期的颜色
            }else
            {
                if (self.isSignCalen) {
                    [button setBackgroundColor:[UIColor colorWithRed:1.00f green:0.85f blue:0.66f alpha:1.00f]];
                }
                else
                [button setBackgroundColor:_dayBgColorWithData];
            }
        }
    }
    
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc]init];
    //zzz表示时区，zzz可以删除，这样返回的日期字符将不包含时区信息。
    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
    NSString *destDateString = [dateFormatter stringFromDate:date];
    NSString*dateStr = [destDateString stringByReplacingOccurrencesOfString:@"-" withString:@""];                       //用来比较
    for (int x = 0; x<_dataArray.count; x++) {
        if (![[_dataArray[x] objectForKey:@"FinanceDate"]isEqualToString:@""]&&[[_dataArray[x] objectForKey:@"FinanceDate"]isEqualToString:dateStr]) {

            UIImageView*selectedView = [[UIImageView alloc]initWithFrame:CGRectMake(button.frame.size.width-10, button.frame.size.height-10, 8, 8)];
            selectedView.backgroundColor = [UIColor clearColor];
            selectedView.image = [UIImage imageNamed:@"CalenderTag"];
            [button addSubview:selectedView];
        }
    }
    
    for (int x = 0; x<_locaDataArray.count; x++) {
        if (![[_locaDataArray[x] objectForKey:@"FinanceDate"]isEqualToString:@""]&&[[_locaDataArray[x] objectForKey:@"FinanceDate"]isEqualToString:dateStr]) {
            UIImageView*selectedView = [[UIImageView alloc]initWithFrame:CGRectMake(button.frame.size.width-10, button.frame.size.height-10, 8, 8)];
            selectedView.backgroundColor = [UIColor clearColor];
            selectedView.image = [UIImage imageNamed:@"CalenderTag"];
            [button addSubview:selectedView];
        }
    }
    
    if (_signCalendarData.count>0) {
    for (int x=0; x<_signCalendarData.count; x++) {
        if ([_signCalendarData[x]isEqualToString:destDateString]) {
            button.backgroundColor = [UIColor redColor];
        }
     }
    }
    NSDateComponents * componentsDateCal = [_gregorian components:_dayInfoUnits fromDate:_calendarDate];
    if (components.month != componentsDateCal.month)
        button.alpha = 0.6f;
}

-(void)reloadBtnbackground{

}

#pragma mark - Action methods

-(IBAction)tappedDate:(UIButton *)sender
{
    if (self.isSignCalen) {
        sender.enabled = NO;
    }else
        sender.enabled = YES;
    
    NSDateComponents *components = [_gregorian components:_dayInfoUnits fromDate:_calendarDate];
    
    if (sender.tag < 0 || sender.tag >= 40)
    {
        // The day tapped is in another month than the one currently displayed
        
        if (!_allowsChangeMonthByDayTap)
            return;
        
        NSInteger offsetMonth   = (sender.tag < 0)?-1:1;
        NSInteger offsetTag     = (sender.tag < 0)?40:-40;
        
        // otherMonthDate set to beginning of the next/previous month
        components.day = 1;
        components.month += offsetMonth;
        NSDate * otherMonthDate =[_gregorian dateFromComponents:components];
        
        if ([self canSwipeToDate:otherMonthDate])
        {
            [self.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];
            _calendarDate = otherMonthDate;
            
            // New selected date set to the day tapped
            components.day = sender.tag + offsetTag;
            _selectedDate = [_gregorian dateFromComponents:components];

            UIViewAnimationOptions animation = (offsetMonth >0)?_nextMonthAnimation:_prevMonthAnimation;
            
            // Animate the transition
            [self performViewAnimation:animation];
        }
        else
        {
            [self performViewNoSwipeAnimation];
        }
        return;
    }
    
    // Day taped within the the displayed month
    NSDateComponents * componentsDateSel = [_gregorian components:_dayInfoUnits fromDate:_selectedDate];
    if(componentsDateSel.day != sender.tag || componentsDateSel.month != components.month || componentsDateSel.year != components.year)
    {
        // Let's keep a backup of the old selectedDay
        NSDate * oldSelectedDate = [_selectedDate copy];
        
        // We redifine the selected day
        componentsDateSel.day       = sender.tag;
        componentsDateSel.month     = components.month;
        componentsDateSel.year      = components.year;
        _selectedDate               = [_gregorian dateFromComponents:componentsDateSel];
        
        // Configure  the new selected day button
        [self configureDayButton:sender             withDate:_selectedDate];
        
        // Configure the previously selected button, if it's visible
        UIButton *previousSelected =(UIButton *) [self viewWithTag:[self buttonTagForDate:oldSelectedDate]];
        if (previousSelected)
            [self configureDayButton:previousSelected   withDate:oldSelectedDate];
        
        // Finally, notify the delegate
        [_delegate dayChangedToDate:_selectedDate];
    }
    
    NSDate *dd = [[NSDate date] copy];//当天日期的颜色
    UIButton *todeyBtn =(UIButton *) [self viewWithTag:[self buttonTagForDate:dd]];
//    if (self.isSignCalen) {
//        [todeyBtn setBackgroundColor:[UIColor colorWithRed:0.83f green:0.94f blue:1.00f alpha:1.00f]];
//    }else
    todeyBtn.backgroundColor = [UIColor colorWithRed:0.01f green:0.69f blue:0.87f alpha:1.00f];
}


#pragma mark - Drawing methods

- (void)drawRect:(CGRect)rect
{
    NSDateComponents *components = [_gregorian components:_dayInfoUnits fromDate:_calendarDate];
    
    components.day = 1;
    NSDate *firstDayOfMonth         = [_gregorian dateFromComponents:components];
    NSDateComponents *comps         = [_gregorian components:NSWeekdayCalendarUnit fromDate:firstDayOfMonth];
    
    NSInteger weekdayBeginning      = [comps weekday];  // Starts at 1 on Sunday
    weekdayBeginning -=2;
    if(weekdayBeginning < 0)
        weekdayBeginning += 7;                          // Starts now at 0 on Monday
    
    NSRange days = [_gregorian rangeOfUnit:NSDayCalendarUnit
                                    inUnit:NSMonthCalendarUnit
                                   forDate:_calendarDate];
    
    NSInteger monthLength = days.length;
    NSInteger remainingDays = (monthLength + weekdayBeginning) % 7;
    
    
    // Frame drawing
//    NSInteger minY = _originY + _dayWidth;
    NSInteger maxY = _originY + _dayWidth * (NSInteger)(1+(monthLength+weekdayBeginning)/7) + ((remainingDays !=0)? _dayWidth:0);
    
    if (_delegate != nil && [_delegate respondsToSelector:@selector(setHeightNeeded:)])
        [_delegate setHeightNeeded:maxY];
    //外面的框
//    CGColorSpaceRef baseSpace = CGColorSpaceCreateDeviceRGB();
//    CGContextRef context = UIGraphicsGetCurrentContext();
//    
//    CGContextSetFillColorWithColor(context, _borderColor.CGColor);
//    CGContextAddRect(context, CGRectMake(_originX - _borderWidth/2.f, minY - _borderWidth/2.f, 7*_dayWidth + _borderWidth, _borderWidth));
//    CGContextAddRect(context, CGRectMake(_originX - _borderWidth/2.f, maxY - _borderWidth/2.f, 7*_dayWidth + _borderWidth, _borderWidth));
//    CGContextAddRect(context, CGRectMake(_originX - _borderWidth/2.f, minY - _borderWidth/2.f, _borderWidth, maxY - minY));
//    CGContextAddRect(context, CGRectMake(_originX + 7*_dayWidth - _borderWidth/2.f, minY - _borderWidth/2.f, _borderWidth, maxY - minY));
//    CGContextFillPath(context);
//    CGColorSpaceRelease(baseSpace), baseSpace = NULL;
    
    BOOL enableNext = YES;
    BOOL enablePrev = YES;
    
    
    // Month label
    NSDateFormatter *format         = [[NSDateFormatter alloc] init];
    [format setDateFormat:@"MMMM yyyy"];
    NSString *dateString            = [format stringFromDate:_calendarDate];
    
    if (!_hideMonthLabel)
    {
        UILabel *titleText              = [[UILabel alloc]initWithFrame:CGRectMake(2, 0, self.bounds.size.width-4, 40)];
        titleText.textAlignment         = NSTextAlignmentCenter;
        titleText.text                  = dateString;
        titleText.font                  = _titleFont;
        titleText.textColor             = _monthAndDayTextColor;
        titleText.backgroundColor  = [UIColor colorWithRed:0.90f green:0.96f blue:1.00f alpha:1.00f];
        [self addSubview:titleText];
    }
    
    if (_delegate != nil && [_delegate respondsToSelector:@selector(setMonthLabel:)])
        [_delegate setMonthLabel:dateString];
    
    // Previous and next button
    UIButton * buttonPrev          = [[UIButton alloc] initWithFrame:CGRectMake(10, 0, 40, 40)];
    [buttonPrev setTitle:@"<" forState:UIControlStateNormal];
    [buttonPrev setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [buttonPrev addTarget:self action:@selector(showPreviousMonth) forControlEvents:UIControlEventTouchUpInside];
    buttonPrev.titleLabel.font          = _defaultFont;
    [self addSubview:buttonPrev];
    
    UIButton * buttonNext          = [[UIButton alloc] initWithFrame:CGRectMake(self.bounds.size.width - 50, 0, 40, 40)];
    [buttonNext setTitle:@">" forState:UIControlStateNormal];
    [buttonNext setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [buttonNext addTarget:self action:@selector(showNextMonth) forControlEvents:UIControlEventTouchUpInside];
    buttonNext.titleLabel.font          = _defaultFont;
    [self addSubview:buttonNext];
    
    NSDateComponents *componentsTmp = [_gregorian components:_dayInfoUnits fromDate:_calendarDate];
    componentsTmp.day = 1;
    componentsTmp.month --;
    NSDate * prevMonthDate =[_gregorian dateFromComponents:componentsTmp];
    if (![self canSwipeToDate:prevMonthDate])
    {
        buttonPrev.alpha    = 0.5f;
        buttonPrev.enabled  = NO;
        enablePrev          = NO;
    }
    componentsTmp.month +=2;
    NSDate * nextMonthDate =[_gregorian dateFromComponents:componentsTmp];
    if (![self canSwipeToDate:nextMonthDate])
    {
        buttonNext.alpha    = 0.5f;
        buttonNext.enabled  = NO;
        enableNext          = NO;
    }
    if (!_allowsChangeMonthByButtons)
    {
        buttonNext.hidden = YES;
        buttonPrev.hidden = YES;
    }
    if (_delegate != nil && [_delegate respondsToSelector:@selector(setEnabledForPrevMonthButton:nextMonthButton:)])
        [_delegate setEnabledForPrevMonthButton:enablePrev nextMonthButton:enableNext];

    // Day labels
    __block CGRect frameWeekLabel = CGRectMake(0, 40, (self.frame.size.width-28)/7,20);
    [_weekDayNames  enumerateObjectsUsingBlock:^(NSString * dayOfWeekString, NSUInteger idx, BOOL *stop)
     {
         frameWeekLabel.origin.x         = (2+self.frame.size.width/7*idx);
         UILabel *weekNameLabel          = [[UILabel alloc] initWithFrame:frameWeekLabel];
         weekNameLabel.text              = dayOfWeekString;
         weekNameLabel.textColor         = ([dayOfWeekString isEqualToString:@"周六"]||[dayOfWeekString isEqualToString:@"周日"])?[UIColor whiteColor]:_monthAndDayTextColor;
         weekNameLabel.font              = [UIFont fontWithName:@"HelveticaNeue" size:13.0f];
         weekNameLabel.layer.borderWidth = _borderWidth/2.f;
         weekNameLabel.layer.borderColor  = _borderColor.CGColor;
         weekNameLabel.backgroundColor   = [UIColor clearColor];
         weekNameLabel.textAlignment     = NSTextAlignmentCenter;
         weekNameLabel.backgroundColor = ([dayOfWeekString isEqualToString:@"周六"]||[dayOfWeekString isEqualToString:@"周日"])?[UIColor colorWithRed:0.00f green:0.55f blue:0.78f alpha:1.00f]:[UIColor colorWithRed:0.60f green:0.82f blue:0.93f alpha:1.00f];
         [self addSubview:weekNameLabel];
     }];
    
    // Current month
    for (NSInteger i= 0; i<monthLength; i++)
    {
        components.day      = i+1;
        NSInteger offsetX   = (1+(self.frame.size.width/7)*((i+weekdayBeginning)%7));
        NSInteger offsetY   = (30 *((i+weekdayBeginning)/7));
        UIButton *button    = [self dayButtonWithFrame:CGRectMake(offsetX, offsetY+60, self.frame.size.width/7-1, 30)];
        
        _frameHeight = offsetY+95;
        
        [self configureDayButton:button withDate:[_gregorian dateFromComponents:components]];
        [self addSubview:button];
    }
//    if (self.isSignCalen) {
//        self.frame = CGRectMake(30, 40, self.frame.size.width-60, _frameHeight);
//    }else
        self.frame = CGRectMake(self.frame.origin.x,self.frame.origin.y, self.frame.size.width, _frameHeight);

    [[NSNotificationCenter defaultCenter] postNotificationName:@"changeFooterViewFrame" object:nil];

    // Previous month
    NSDateComponents *previousMonthComponents = [_gregorian components:_dayInfoUnits fromDate:_calendarDate];
    previousMonthComponents.month --;
    NSDate *previousMonthDate = [_gregorian dateFromComponents:previousMonthComponents];
    NSRange previousMonthDays = [_gregorian rangeOfUnit:NSDayCalendarUnit inUnit:NSMonthCalendarUnit forDate:previousMonthDate];
    NSInteger maxDate = previousMonthDays.length - weekdayBeginning;
    for (int i=0; i<weekdayBeginning; i++)
    {
        previousMonthComponents.day     = maxDate+i+1;
        NSInteger offsetX               = (1+(self.frame.size.width/7)*(i%7));
        NSInteger offsetY               = (30 *(i/7));
        UIButton *button                = [self dayButtonWithFrame:CGRectMake(offsetX, offsetY+60, (self.frame.size.width/7)-1, 30)];

        [self configureDayButton:button withDate:[_gregorian dateFromComponents:previousMonthComponents]];
        [self addSubview:button];
    }
    
    // Next month
    if(remainingDays == 0)
        return ;
    
    NSDateComponents *nextMonthComponents = [_gregorian components:_dayInfoUnits fromDate:_calendarDate];
    nextMonthComponents.month ++;
    
    for (NSInteger i=remainingDays; i<7; i++)
    {
        nextMonthComponents.day         = (i+1)-remainingDays;
        NSInteger offsetX               = (1+(self.frame.size.width/7)*((i) %7));
        NSInteger offsetY               = (30 *((monthLength+weekdayBeginning)/7));
        UIButton *button                = [self dayButtonWithFrame:CGRectMake(offsetX,offsetY+60, (self.frame.size.width/7)-1, 30)];

        [self configureDayButton:button withDate:[_gregorian dateFromComponents:nextMonthComponents]];
        [self addSubview:button];
    }
}

- (NSString*)changStyle:(NSDate*)date
{
    NSDateComponents *components = [_gregorian components:_dayInfoUnits fromDate:date];
    
//    //被点击选中
//    if(calendarSelect.year == calendarDay.year &
//       calendarSelect.month == calendarDay.month &
//       calendarSelect.day == calendarDay.day){
//        
//        calendarDay.style = CellDayTypeClick;
//        selectcalendarDay = calendarDay;
//        
//        
//        //没被点击选中
//    }else{
//        
//        //昨天乃至过去的时间设置一个灰度
//        if (calendarToDay.year >= calendarDay.year &
//            calendarToDay.month >= calendarDay.month &
//            calendarToDay.day > calendarDay.day) {
//            
//            calendarDay.style = CellDayTypePast;
//            
//            //之后的时间时间段
//        }else if (calendarbefore.year <= calendarDay.year &
//                  calendarbefore.month <= calendarDay.month &
//                  calendarbefore.day <= calendarDay.day) {
//            
//            calendarDay.style = CellDayTypePast;
//            
//            //需要正常显示的时间段
//        }else{
//            
//            //周末
//            if (calendarDay.week == 1 || calendarDay.week == 7){
//                calendarDay.style = CellDayTypeWeek;
//                
//                //工作日
//            }else{
//                calendarDay.style = CellDayTypeFutur;
//            }
//        }
//    }
//    
//    
//    
//    
//    //===================================
//    //这里来判断节日
//    //今天
//    if (calendarToDay.year == calendarDay.year &&
//        calendarToDay.month == calendarDay.month &&
//        calendarToDay.day == calendarDay.day) {
//        calendarDay.holiday = @"今天";
//        
//        //明天
//    }else if(calendarToDay.year == calendarDay.year &&
//             calendarToDay.month == calendarDay.month &&
//             calendarToDay.day - calendarDay.day == -1){
//        calendarDay.holiday = @"明天";
//        
//        //后天
//    }else if(calendarToDay.year == calendarDay.year &&
//             calendarToDay.month == calendarDay.month &&
//             calendarToDay.day - calendarDay.day == -2){
//        calendarDay.holiday = @"后天";
//        
//        //1.1元旦
//    }else
    NSString*holiday;
    
    if (components.month == 1 &&
              components.day == 1){
        holiday = @"元旦";
        
        //2.14情人节
    }else if (components.month == 2 &&
              components.day == 14){
        holiday = @"情人节";
        
        //3.8妇女节
    }else if (components.month == 3 &&
              components.day == 8){
        holiday = @"妇女节";
        
        //5.1劳动节
    }else if (components.month == 5 &&
              components.day == 1){
        holiday = @"劳动节";
        
        //6.1儿童节
    }else if (components.month == 6 &&
              components.day == 1){
        holiday = @"儿童节";
        
        //8.1建军节
    }else if (components.month == 8 &&
              components.day == 1){
        holiday = @"建军节";
        
        //9.10教师节
    }else if (components.month == 9 &&
              components.day == 10){
        holiday = @"教师节";
        
        //10.1国庆节
    }else if (components.month == 10 &&
              components.day == 1){
        holiday = @"国庆节";
        
        //11.1植树节
    }else if (components.month == 11 &&
              components.day == 1){
        holiday = @"植树节";
        
        //11.11光棍节
    }else if (components.month == 11 &&
              components.day == 11){
        holiday = @"光棍节";
        
    }else{
        
        return @"";
        //            这里写其它的节日
        
    }
    return holiday;
}

#pragma mark - 农历转换函数

-(NSString*)LunarForSolarYear:(NSString*)solarYear
{
    NSArray *solarYear_arr= [solarYear componentsSeparatedByString:@"-"];
    
    NSString*holiday;
    
    if([solarYear_arr[0]isEqualToString:@"正"] &&
       [solarYear_arr[1]isEqualToString:@"初一"]){
        
        //正月初一：春节
        holiday = @"春节";
        
    }else if([solarYear_arr[0]isEqualToString:@"正"] &&
             [solarYear_arr[1]isEqualToString:@"十五"]){
        
        
        //正月十五：元宵节
        holiday = @"元宵";
        
    }else if([solarYear_arr[0]isEqualToString:@"二"] &&
             [solarYear_arr[1]isEqualToString:@"初二"]){
        
        //二月初二：春龙节(龙抬头)
        holiday = @"龙抬头";
        
    }else if([solarYear_arr[0]isEqualToString:@"五"] &&
             [solarYear_arr[1]isEqualToString:@"初五"]){
        
        //五月初五：端午节
        holiday = @"端午";
        
    }else if([solarYear_arr[0]isEqualToString:@"七"] &&
             [solarYear_arr[1]isEqualToString:@"初七"]){
        
        //七月初七：七夕情人节
        holiday = @"七夕";
        
    }else if([solarYear_arr[0]isEqualToString:@"八"] &&
             [solarYear_arr[1]isEqualToString:@"十五"]){
        
        //八月十五：中秋节
        holiday = @"中秋";
        
    }else if([solarYear_arr[0]isEqualToString:@"九"] &&
             [solarYear_arr[1]isEqualToString:@"初九"]){
        
        //九月初九：重阳节、中国老年节（义务助老活动日）
        holiday = @"重阳";
        
    }else if([solarYear_arr[0]isEqualToString:@"腊"] &&
             [solarYear_arr[1]isEqualToString:@"初八"]){
        
        //腊月初八：腊八节
        holiday = @"腊八";
        
    }else if([solarYear_arr[0]isEqualToString:@"腊"] &&
             [solarYear_arr[1]isEqualToString:@"二十四"]){
        
        
        //腊月二十四 小年
        holiday = @"小年";
        
    }else if([solarYear_arr[0]isEqualToString:@"腊"] &&
             [solarYear_arr[1]isEqualToString:@"三十"]){
        
        //腊月三十（小月二十九）：除夕
        holiday = @"除夕";
        
    }else{
        return @"";
    }
    return holiday;
}

-(NSString *)LunarForSolarYear:(int)wCurYear Month:(int)wCurMonth Day:(int)wCurDay{
    
    //农历日期名
    NSArray *cDayName =  [NSArray arrayWithObjects:@"*",@"初一",@"初二",@"初三",@"初四",@"初五",@"初六",@"初七",@"初八",@"初九",@"初十",
                          @"十一",@"十二",@"十三",@"十四",@"十五",@"十六",@"十七",@"十八",@"十九",@"二十",
                          @"廿一",@"廿二",@"廿三",@"廿四",@"廿五",@"廿六",@"廿七",@"廿八",@"廿九",@"三十",nil];
    
    //农历月份名
    NSArray *cMonName =  [NSArray arrayWithObjects:@"*",@"正",@"二",@"三",@"四",@"五",@"六",@"七",@"八",@"九",@"十",@"十一",@"腊",nil];
    
    //公历每月前面的天数
    const int wMonthAdd[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
    
    //农历数据
    const int wNongliData[100] = {2635,333387,1701,1748,267701,694,2391,133423,1175,396438
        ,3402,3749,331177,1453,694,201326,2350,465197,3221,3402
        ,400202,2901,1386,267611,605,2349,137515,2709,464533,1738
        ,2901,330421,1242,2651,199255,1323,529706,3733,1706,398762
        ,2741,1206,267438,2647,1318,204070,3477,461653,1386,2413
        ,330077,1197,2637,268877,3365,531109,2900,2922,398042,2395
        ,1179,267415,2635,661067,1701,1748,398772,2742,2391,330031
        ,1175,1611,200010,3749,527717,1452,2742,332397,2350,3222
        ,268949,3402,3493,133973,1386,464219,605,2349,334123,2709
        ,2890,267946,2773,592565,1210,2651,395863,1323,2707,265877};
    
    static int nTheDate,nIsEnd,m,k,n,i,nBit;
    
    
    //计算到初始时间1921年2月8日的天数：1921-2-8(正月初一)
    nTheDate = (wCurYear - 1921) * 365 + (wCurYear - 1921) / 4 + wCurDay + wMonthAdd[wCurMonth - 1] - 38;
    
    if((!(wCurYear % 4)) && (wCurMonth > 2))
        nTheDate = nTheDate + 1;
    
    //计算农历天干、地支、月、日
    nIsEnd = 0;
    m = 0;
    while(nIsEnd != 1)
    {
        if(wNongliData[m] < 4095)
            k = 11;
        else
            k = 12;
        n = k;
        while(n>=0)
        {
            //获取wNongliData(m)的第n个二进制位的值
            nBit = wNongliData[m];
            for(i=1;i<n+1;i++)
                nBit = nBit/2;
            
            nBit = nBit % 2;
            
            if (nTheDate <= (29 + nBit))
            {
                nIsEnd = 1;
                break;
            }
            
            nTheDate = nTheDate - 29 - nBit;
            n = n - 1;
        }
        if(nIsEnd)
            break;
        m = m + 1;
    }
    wCurYear = 1921 + m;
    wCurMonth = k - n + 1;
    wCurDay = nTheDate;
    if (k == 12)
    {
        if (wCurMonth == wNongliData[m] / 65536 + 1)
            wCurMonth = 1 - wCurMonth;
        else if (wCurMonth > wNongliData[m] / 65536 + 1)
            wCurMonth = wCurMonth - 1;
    }
    
    
    //生成农历月
    NSString *szNongliMonth;
    if (wCurMonth < 1){
        szNongliMonth = [NSString stringWithFormat:@"闰%@",(NSString *)[cMonName objectAtIndex:-1 * wCurMonth]];
    }else{
        szNongliMonth = (NSString *)[cMonName objectAtIndex:wCurMonth];
    }
    
    //生成农历日
    NSString *szNongliDay = [cDayName objectAtIndex:wCurDay];
    
    //合并
    NSString *lunarDate = [NSString stringWithFormat:@"%@-%@",szNongliMonth,szNongliDay];
    
    return lunarDate;
}


@end
// 版权属于原作者
// http://code4app.com (cn) http://code4app.net (en)
// 发布代码于最专业的源码分享网站: Code4App.com